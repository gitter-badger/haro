{"name":"Haro","tagline":"Harō is modern DataStore that can be wired to an API","body":"# haro\r\n\r\n[![build status](https://secure.travis-ci.org/avoidwork/haro.svg)](http://travis-ci.org/avoidwork/haro)\r\n\r\nHarō is a modern immutable DataStore built with ES6 features, which can be wired to an API for a complete feedback loop.\r\nIt is un-opinionated, and offers a plug'n'play solution to modeling, searching, & managing data on the client, or server \r\n(in RAM). It is a [partially persistent data structure](https://en.wikipedia.org/wiki/Persistent_data_structure), by maintaining version sets of records in `versions` ([MVCC](https://en.wikipedia.org/wiki/Multiversion_concurrency_control)).\r\n\r\nSynchronous commands return instantly (`Array` or `Tuple`), while asynchronous commands return  `Promises` which will\r\nresolve or reject in the future. This allows you to build complex applications without worrying about managing async code.\r\n\r\nHarō indexes have the following structure `Map (field/property) > Map (value) > Set (PKs)` which allow for quick & easy searching, as well as inspection.\r\nIndexes can be managed independently of `del()` & `set()` operations, for example you can lazily create new indexes via `reindex(field)`, or `sortBy(field)`.\r\n\r\n### Examples\r\n#### Piping Promises\r\n```javascript\r\nvar store = haro();\r\n\r\nconsole.log(store.total); // 0\r\n\r\nstore.set(null, {abc: true}).then(function (arg) {\r\n  console.log(arg); // [$uuid, {abc: true}];\r\n  console.log(store.total); // 1\r\n  return store.set(arg[0], {abc: false});\r\n}).then(function (arg) {\r\n  console.log(arg); // [$uuid, {abc: false}];\r\n  console.log(store.versions.get(arg[0]).size); // 1;\r\n  return store.del(arg[0])\r\n}).then(function () {\r\n  console.log(store.total); // 0;\r\n}).catch(function (e) {\r\n  console.error(e.stack || e.message || e);\r\n});\r\n```\r\n\r\n#### Indexes & Searching\r\n```javascript\r\nvar store = haro(null, {index: ['name', 'age']}),\r\n    data = [{name: 'John Doe', age: 30}, {name: 'Jane Doe', age: 28}];\r\n\r\nstore.batch(data, 'set').then(function (records) {\r\n  console.log(records[0]); // [$uuid, {name: 'John Doe', age: 30}]\r\n  console.log(store.total); // 2\r\n  console.log(store.find({age: 28})); // [[$uuid, {name: 'Jane Doe', age: 28}]]\r\n  console.log(store.search(/^ja/i, 'name')); // [[$uuid, {name: 'Jane Doe', age: 28}]]\r\n  console.log(store.search(function (age) { return age < 30; }, 'age')); // [[$uuid, {name: 'Jane Doe', age: 28}]]\r\n}).catch(function (e) {\r\n  console.error(e.stack || e.message || e);\r\n});\r\n```\r\n\r\n#### MVCC versioning\r\n```javascript\r\nvar store = haro();\r\n\r\nstore.set(null, {abc: true}).then(function (arg) {\r\n  return store.set(arg[0], {abc: false});\r\n}).then(function (arg) {\r\n  return store.set(arg[0], {abc: true});\r\n}).then(function (arg) {\r\n  store.versions.get(arg[0]).forEach(function (i) { console.log(i[0]); }); // {abc: true}, {abc: false}\r\n}).catch(function (e) {\r\n  console.error(e.stack || e.message || e);\r\n});\r\n```\r\n\r\n### Configuration\r\n**config**\r\n_Object_\r\n\r\nDefault settings for `fetch()`.\r\n\r\n**index**\r\n_Array_\r\n\r\nArray of values to index\r\n\r\n**key**\r\n_String_\r\n\r\nOptional `Object` key to utilize as `Map` key, defaults to a version 4 `UUID` if not specified, or found\r\n\r\n**source**\r\n_String_\r\n\r\nOptional `Object` key to retrieve data from API responses, see `setUri()`\r\n\r\n**versioning**\r\n_Boolean_\r\n\r\nEnable/disable MVCC style versioning of records, default is `true`. Versions are stored in `Sets` for easy iteration.\r\n\r\n### Properties\r\n**data**\r\n_Map_\r\n\r\n`Map` of records, updated by `del()` & `set()`\r\n\r\n**indexes**\r\n_Map_\r\n\r\nMap of indexes, which are Sets containing Map keys.\r\n\r\n**registry**\r\n_Array_\r\n\r\nArray representing the order of **data**\r\n\r\n**total**\r\n_Number_\r\n\r\nTotal records in the DataStore\r\n\r\n**uri**\r\n_String_\r\n\r\nURI of an API the DataStore is wired to, in a feedback loop (do not modify, use `setUri()`)\r\n\r\n**versions**\r\n_Map_\r\n\r\n`Map` of `Sets` of records, updated by `set()`\r\n\r\n### API\r\n**batch( array, type )**\r\n_Promise_\r\n\r\nThe first argument must be an `Array`, and the second argument must be `del` or `set`.\r\n\r\n**clear()**\r\n_self_\r\n\r\nRemoves all key/value pairs from the DataStore.\r\n\r\n**del( key )**\r\n_Promise_\r\n\r\nDeletes the record.\r\n\r\n**entries()**\r\n_MapIterator_\r\n\r\nReturns returns a new `Iterator` object that contains an array of `[key, value]` for each element in the `Map` object in insertion order.\r\n\r\n**filter( callbackFn )**\r\n_Tuple_\r\n\r\nReturns a `Tuple` of double `Tuples` with the shape `[key, value]` for records which returned `true` to `callbackFn(value, key)`.\r\n\r\n**find( where )**\r\n_Tuple_\r\n\r\nReturns a `Tuple` of double `Tuples` with found by indexed values matching the `where`.\r\n\r\n**forEach( callbackFn[, thisArg] )**\r\n_Undefined_\r\n\r\nCalls `callbackFn` once for each key-value pair present in the `Map` object, in insertion order. If a `thisArg` parameter is provided to `forEach`, it will be used as the this value for each callback.\r\n\r\n**get( key )**\r\n_Tuple_\r\n\r\nGets the record as a double `Tuple` with the shape `[key, value]`.\r\n\r\n**keys()**\r\n_MapIterator_\r\n\r\nReturns a new `Iterator` object that contains the keys for each element in the `Map` object in insertion order.`\r\n\r\n**limit( start, offset )**\r\n_Tuple_\r\n\r\nReturns a `Tuple` of double `Tuples` with the shape `[key, value]` for the corresponding range of records.\r\n\r\n**map( callbackFn )**\r\n_Tuple_\r\n\r\nReturns a `Tuple` of double `Tuples` with the shape `[key, value]` of records with the returned `value` of `callbackFn(value, key)`.\r\n\r\n**reindex( [index] )**\r\n_Haro_\r\n\r\nRe-indexes the DataStore, to be called if changing the value of `index`.\r\n\r\n\r\n**request( input, config )**\r\n_Promise_\r\n\r\nReturns a `Promise` for a `fetch()` with a double `Tuple` [`body`, `status`] as the `resolve()` argument.\r\n\r\n**search( arg, index )**\r\n_Tuple_\r\n\r\nReturns a `Tuple` of double `Tuples` with the shape `[key, value]` of records found matching `arg`.\r\nIf `arg` is a `Function` a match is made if the result is `true`, if `arg` is a `RegExp` the field value must `.test()` as `true`, else the value must be an equality match. \r\n\r\n**set( key, data, batch=false )**\r\n_Promise_\r\n\r\nReturns a `Promise` for setting/amending a record in the DataStore, if `key` is `false` a version 4 `UUID` will be generated.\r\n\r\n**setUri( uri )**\r\n_Promise_\r\n\r\nReturns a `Promise` for wiring the DataStore to an API, with the retrieved record set as the `resolve()` argument.\r\n\r\n**sort( callbackFn )**\r\n_Array_\r\n\r\nReturns an Array of the DataStore, sorted by `callbackFn`.\r\n\r\n**sortBy( index )**\r\n_Tuple_\r\n\r\nReturns a `Tuple` of double `Tuples` with the shape `[key, value]` of records sorted by an index.\r\n\r\n**toArray()**\r\n_Array_\r\n\r\nReturns an Array of the DataStore.\r\n\r\n**values()**\r\n_MapIterator_\r\n\r\nReturns a new `Iterator` object that contains the values for each element in the `Map` object in insertion order.\r\n\r\n### Requirements\r\n- `Map`\r\n- `Promise`\r\n- `Set`\r\n- `fetch()`\r\n- `tuple()` see [tiny-tuple](https://github.com/avoidwork/tiny-tuple) for loading in a browser\r\n\r\n## License\r\nCopyright (c) 2015 Jason Mulligan\r\nLicensed under the BSD-3 license\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}